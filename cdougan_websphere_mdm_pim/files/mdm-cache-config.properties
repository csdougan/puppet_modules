# Simplified common cache settings that override properties in cache specific file in same directory
# cacheName.property=value
# common properties to set include:
# maxElementsInMemory
# timeToLiveSeconds   (total time before a cached value is discarded) 
# These settings apply to the same service as other files in this directory.

# BASE VALUES ON FOLLOWING NOTES
# Very important to check the Cache status admin page to evaulate cache utilization.
# If too much memory is used by a cache, then you must either increase memory or reduce a cache size.
# If the System Adminstrator -> Caches -> Cache hit percentage is below 90%, consider raising the size of the cache.

# Number of attribute groups being used within the timeToLiveSeconds
attrGroupCache.maxElementsInMemory=100
# Attr group will stay in cache at most 300 seconds. This needs to be set for attr groups
attrGroupCache.timeToLiveSeconds=300

# Number of active catalogs being cached. I.e., the catalog must be marked as cached, and 
# this number determines how many of those will be active at one time.
# Note, this cache actually holds the items.
catalogCache.maxElementsInMemory=100


# Number of catalog definitions cached. This number should be equal to the total number
# number of catalogs plus collaboration areas. This cache is very small. It holds the definition
# of the catalog.
catalogDefinitionCache.maxElementsInMemory=100


# Holds regular views and workflow views.
# Each workflow step in use is effectively a view for purposes of this count.
# Each view can have up to 5 subviews, each of which one cache element
# Thus, 10 views would require up to 10*5 cache elements
# The view cache is not user specific. I.e., the number of active users does not affect this cache size.
ctgViewCache.maxElementsInMemory=500

# The number of active lookup tables
lookupCache.maxElementsInMemory=100

# The number of users times the number of roles
# Cached values are modest
roleCache.maxElementsInMemory=2000

# The number of roles
allRoleCache.maxElementsInMemory=2000

# The number of users times the number of roles times the number of objects
# Cached values are small
accessCache.maxElementsInMemory=5000

# This value includes both docstore scripts and spec scripts
# Set this number to handle all the active scripts used
scriptCache.maxElementsInMemory=1000

# This cache maps node ids to spec ids. The value should be greater than the
# expected number of total nodes. The cache is a map of int to int, so it takes very little
# memory per element
nodeIdToSpecIdCache.maxElementsInMemory=2000

# This is the total number of specs in the system (all companies).
specNameToSpecIdCache.maxElementsInMemory=2000


# Spec Cache -- be careful not to set too large or you'll run out of memory
# This values should be equal to the maximum number of specs that you
# want cached. It can include specs at multiple version levels. Specs at multiple
# version levels are used when browsing old versions of catalogs, an infrequently 
# done operation. There are limited other times that old spec versions are cached.
# The cached value is a large object, so be careful about caching too many specs.
# However, this number must be set sufficiently large such that all frequently used
# specs are cached.
specCache__KEY_START_VERSION_TO_VALUE.maxElementsInMemory=1200

# Spec Cache -- This number should be greater than or equal to the maximum number 
# of specs in the system. Avoid setting this less than the maximum
# number of specs. The cached value is an int, so it takes very little memory.
# Typically, just set this greater than the greatest number of specs the system will have.
specCache__KEY_TO_CURRENT_START_VERSION.maxElementsInMemory=1200


# Spec Cache -- This number should be greater than or equal to the maximum number 
# of specs in the system based on queries against versions that are not current.
# The cached value is an int, so it takes very little memory.
# If you are unsure of what to set this value, set it as the same 
# as specCache__KEY_TO_CURRENT_START_VERSION
specCache__KEY_VERSION_TO_START_VERSION.maxElementsInMemory=1200

# This is the maximum number of WSDL documents to be stored in WSDL Cache.
wsdlCache.maxElementsInMemory=100

# The number of workflows cached
# Can be relatively large objects
# Try to cache all active workflows
workflowCache.maxElementsInMemory=250


# DO NOT MODIFY ENTRIES BELOW THIS LINE
lookupCache.cacheEntryFactory=com.ibm.ccd.content.common.LookupTableCacheEntryFactory
catalogCache.cacheEntryFactory=com.ibm.ccd.content.common.CatalogCacheEntryFactory
catalogDefinitionCache.cacheEntryFactory=com.ibm.ccd.element.common.CatalogDefinitionCacheEntryFactory
accessCache.cacheEntryFactory=com.ibm.ccd.common.security.common.AccessCacheEntryFactory
roleCache.cacheEntryFactory=com.ibm.ccd.common.security.common.RoleCacheEntryFactory
allRoleCache.cacheEntryFactory=com.ibm.ccd.common.security.common.AllRoleCacheEntryFactory
nodeIdToSpecIdCache.cacheEntryFactory=com.ibm.ccd.element.common.NodeIdToSpecIdCacheEntryFactory
specNameToSpecIdCache.cacheEntryFactory=com.ibm.ccd.element.common.SpecNameToSpecIdCacheEntryFactory
specCache.versionProvider=com.ibm.ccd.element.common.SpecCacheVersionProvider
# preloaders are not used but this is how they could be used
#lookupCache.preloader=com.ibm.ccd.cache.LoadedCachePreloader


